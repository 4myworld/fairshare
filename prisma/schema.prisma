generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // PlanetScale-safe (no FK constraints)
}

// ------- Auth + Users (NextAuth) -------

model User {
  id            String    @id @default(cuid())
  email         String?   @unique // optional to support providers that may hide email
  name          String?
  image         String?
  emailVerified DateTime?
  role          String    @default("buyer") // "buyer" | "vendor" | "admin" etc.
  createdAt     DateTime  @default(now())

  // NextAuth back-relations
  accounts Account[]
  sessions Session[]

  // Ecommerce back-relations
  vendor Vendor?
  orders Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------- Ecommerce domain models -------

model Vendor {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  kycStatus String   @default("pending")
  createdAt DateTime @default(now())

  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  title       String
  description String?
  priceCents  Int
  currency    String   @default("USD")
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]

  @@index([vendorId])
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  status        String   @default("pending") // pending | paid | shipped | refunded
  subtotalCents Int
  shippingCents Int      @default(0)
  currency      String   @default("USD")
  createdAt     DateTime @default(now())

  items OrderItem[]

  @@index([userId])
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int    @default(1)
  priceCents Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
